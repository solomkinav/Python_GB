# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы
# методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, subcells):
        self.subcells = subcells

    def __add__(self, other):
        return Cell(self.subcells + other.subcells)

    def __sub__(self, other):
        result = self.subcells - other.subcells
        if result > 0:
            return Cell(result)
        else:
            print('Разность количества ячеек двух клеток - не больше нуля')

    def __mul__(self, other):
        return Cell(self.subcells * other.subcells)

    def __truediv__(self, other):
        return Cell(self.subcells // other.subcells)

    def make_order(self, subcells_in_row):
        numbers = self.subcells
        blocks = numbers // subcells_in_row
        result = ''
        while blocks > 0:
            result += '*' * subcells_in_row
            if numbers != subcells_in_row:  # если данная строка не последняя
                result += '\n'
            numbers -= subcells_in_row
            blocks = numbers // subcells_in_row
        result += '*' * numbers
        return result


# Проверка
a = Cell(4)
b = Cell(5)
c = Cell(6)
e = Cell(12)
d = a * b
f = c + e
g = c - b
h = e / a
print(g.subcells)
print(h.subcells)
print()
# проверка работы метода make_order
print((d.make_order(5)))
print()
print((f.make_order(5)))