# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие
# только чисел. Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя
# данные и заполнять список. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит
# работу скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список
# выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить
# соответствующее сообщение. При этом работа скрипта не должна завершаться.

class NotIntError(Exception):
    def __init__(self, txt):
        self.txt = txt


user_list = []  # начальный список
n = "start"
while n != 'stop':
    n = input("Введите целое число, для завершения работы введите stop: ")
    try:
        isdigit = n.isdigit()  # состоит ли введеный элемент только из цифр
        if not isdigit:
            raise NotIntError("Вы ввели не число, элемент не был добавлен в список")
    except NotIntError as e:
        print(e)
    else:
        user_list.append(int(n))
print(user_list)